apiVersion: source.toolkit.fluxcd.io/v1beta2
kind: HelmRepository
metadata:
  name: prometheus
  namespace: prometheus
spec:
  interval: 5m
  url: https://prometheus-community.github.io/helm-charts
---
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: prometheus
  namespace: prometheus
spec:
  interval: 10m
  timeout: 5m
  targetNamespace: prometheus
  chart:
    spec:
      chart: kube-prometheus-stack
      version: '70.3.0'
      sourceRef:
        kind: HelmRepository
        name: prometheus
      interval: 5m
  releaseName: prometheus
  values:
    prometheus:
      ingress:
        enabled: true
        hosts:
          - prometheus.klangregen.de
        tls:
          - secretName: prometheus-cert
            hosts:
              - prometheus.klangregen.de
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt
          acme.cert-manager.io/http01-edit-in-place: "true"
          kubernetes.io/ingress.class: nginx
          external-dns.alpha.kubernetes.io/hostname: prometheus.klangregen.de
          nginx.ingress.kubernetes.io/auth-type: basic
          nginx.ingress.kubernetes.io/auth-secret: basic-auth
          nginx.ingress.kubernetes.io/auth-realm: "Enter your credentials"
      prometheusSpec:
        enableRemoteWriteReceiver: true
        podMonitorSelector: {}
        retention: ""
        retentionSize: 14GB
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: longhorn
              accessModes: ["ReadWriteOnce"]
              resources:
                requests:
                  storage: 15Gi
    grafana:
      enabled: false
      forceDeployDashboards: true
      namespaceOverride: grafana
      forceDeployDatasources: true
    alertmanager:
      extraSecret:
        name: slack-connection
        data:
          slack: ${base64decode(data.oci_secrets_secretbundle.slack_workspace_id.secret_bundle_content.0.content)}
      alertmanagerSpec:
        name: alertmanager-config
